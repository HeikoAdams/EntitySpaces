<% 
/*
=========================================================================
    
    EntitySpaces 2010 
    Persistence Layer and Business Objects for Microsoft .NET 
    Copyright 2005 - 2010 EntitySpaces, LLC 
    EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC 
    http://www.entityspaces.net 

    This template is bound by the EntitySpaces License Agreement which 
    is located here:

    http://www.entityspaces.net/portal/License/tabid/97/Default.aspx
    
=========================================================================
*/%><%@ TemplateInfo 
    UniqueID="FC27945B-A3D2-4045-8955-29EDEC3F674D" 
    Title="Generated - ProxyStub (VB)"   
    Description="The Proxy Entity Class" 
    Namespace="EntitySpaces.2019.VB.Generated" 
    Author="EntitySpaces, LLC"
    Version="2019.0.0.0"
    IsSubTemplate="True" %><%
//-------------------------------------------------------
// Extract the UI choices that we need
//-------------------------------------------------------	
bool TargetTheCompactFramework = (bool)esMeta.Input["TargetTheCompactFramework"];
string Namespace = (string)esMeta.Input["Namespace"];
bool GenerateSingleFile = (bool)esMeta.Input["GenerateSingleFile"];
bool WcfSupport = (bool)esMeta.Input["WcfSupport"];
string WcfDataContract = (string)esMeta.Input["WcfDataContract"];
bool WcfEmitDefaultValue = (bool)esMeta.Input["WcfEmitDefaultValue"];
bool WcfOrder = (bool)esMeta.Input["WcfOrder"];
bool IncludeRowStateInXml = (bool)esMeta.Input["IncludeRowStateInXml"];
bool WcfIsRequired = (bool)esMeta.Input["WcfIsRequired"];
bool CompactXML = (bool)esMeta.Input["CompactXML"];

//-------------------------------------------------------
// Create Local Variables
//-------------------------------------------------------	
string comma;
EntitySpaces.MetadataEngine.IPropertyCollection props;	
int lastOrdinal = 0;
int compactXmlIndex = 0;

//-------------------------------------------------------
// Begin Execution
//-------------------------------------------------------	
ITable table = (ITable)esMeta.Input["Table"];
IView view = (IView)esMeta.Input["View"];			
IColumns cols = (IColumns)esMeta.Input["Columns"];
esPluginSource source = (esPluginSource)esMeta.Input["Source"];

if(table != null)
{
	props = table.Properties;
}
else
{
	props = view.Properties;
}

if(!GenerateSingleFile){ %>'===============================================================================
'                   EntitySpaces Studio by EntitySpaces, LLC
'            Persistence Layer and Business Objects for Microsoft .NET
'            EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC
'                         http://www.entityspaces.net
'===============================================================================
' EntitySpaces Version : <%=esMeta.esPlugIn.esVersion%>
' EntitySpaces Driver  : <%=esMeta.esPlugIn.esDriver%><%if(!esMeta.esPlugIn.TurnOffDateTimeInClassHeaders){%>
' Date Generated       : <%=DateTime.Now.ToString()%><%}%>
'===============================================================================

Imports System
Imports System.Collections.Generic
Imports System.Text
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml.Serialization

Imports EntitySpaces.Interfaces
Imports EntitySpaces.Core

Namespace <%=Namespace%>
<%}%>

    <%if(WcfSupport){%><DataContract(Namespace:="<%=WcfDataContract%>", Name:="<%=source.Entity%>")> _<%}%>
    <XmlType(TypeName:="<%=source.Entity%>ProxyStub")> _
    <Serializable> _
    Partial Public Class <%=source.Entity%>ProxyStub
	
		Public Sub New()
            Me._entity = New <%=source.Entity%>()
            Me.theEntity = Me._entity
		End Sub
		
		Public Sub New(ByVal obj As <%=source.Entity%>)
            Me.Entity = obj
            Me.theEntity = Me._entity
		End Sub
		
		Public Sub New(ByVal obj As <%=source.Entity%>, ByVal dirtyColumnsOnly As Boolean)
            Me.Entity = obj
            Me.theEntity = Me._entity
			Me.dirtyColumnsOnly = dirtyColumnsOnly
		End Sub	
		
<%if(!TargetTheCompactFramework){%>			
		#Region "Implicit Casts"

		Public Shared Widening Operator CType(ByVal entity As <%=source.ProxyStub%>) As <%=source.Entity%>
			Return entity.Entity
		End Operator

		#End Region<%}%>			

        Public Function GetEntityType() As Type
 	        Return GetType(<%=source.Entity%>)
        End Function
		
<%	foreach(IColumn col in cols)
	{
		lastOrdinal = col.Ordinal; %>
		<%if(WcfSupport){%><DataMember(Name:="<%=CompactXML ? "a" + compactXmlIndex++.ToString() : col.PropertyName%>"<%if(WcfOrder){%>, Order:=<%=col.Ordinal.ToString()%><%} if(WcfEmitDefaultValue){%>, EmitDefaultValue:=False<%} if(WcfIsRequired && !col.IsNullable) {%>, IsRequired:=True<%}%>)> _<%}%>		
        Public Property <%=col.PropertyName%> As <%=col.NullableTypeVB%>
        
            Get<%if(col.IsInPrimaryKey || IsConcurrency(props, col)) { %>
				If Me.Entity.es.IsDeleted Then
                    Dim o As Object = Me.Entity. _
                       GetOriginalColumnValue(<%=source.Metadata%>.ColumnNames.<%=col.PropertyName%>)
					Return CType(o, <%=col.NullableTypeVB%>)
                Else
					Return Me.Entity.<%=col.PropertyName%>
				End If<% } else { %>
                If Me.IncludeColumn(<%=source.Metadata%>.ColumnNames.<%=col.PropertyName%>) Then
                    Return Me.Entity.<%=col.PropertyName%>
                Else
                    Return Nothing
				End If<%}%>				
			End Get
			
            Set(ByVal value As <%=col.NullableTypeVB%>)
				Me.Entity.<%=col.PropertyName%> = value
			End Set
			
		End Property
<%	}%><%if(IncludeRowStateInXml) { %>

		<%if(WcfSupport){%><DataMember(Name := "<%=CompactXML ? "a10000" : "esRowState"%>"<%if(WcfOrder){%>, Order := 10000<%}%>)> _<%}%>
        Public Property esRowState As String
            Get
				Return Me.TheRowState
            End Get

            Set 
				Me.TheRowState = value
            End Set
        End Property<%}%>
		
		<%if(WcfSupport){%><DataMember(Name := "<%=CompactXML ? "a10001" : "ModifiedColumns"%>"<%if(WcfOrder){%>, Order := 10001<%}%><%if(WcfEmitDefaultValue){%>, EmitDefaultValue := False<%}%>)> _<%}%>
		Private Property ModifiedColumns() As List(Of String)
			Get
				Return Entity.es.ModifiedColumns
			End Get
			Set(ByVal value As List(Of String))
				Entity.es.ModifiedColumns.AddRange(value)
			End Set
		End Property		
		
		<%if(WcfSupport){%><DataMember(Name := "<%=CompactXML ? "a10002" : "ExtraColumns"%>"<%if(WcfOrder){%>, Order := 10002<%}%><%if(WcfEmitDefaultValue){%>, EmitDefaultValue := False<%}%>)> _<%}%>
        <XmlIgnore> _		
		Public Property esExtraColumns() As Dictionary(Of String, Object)
			Get
				Return Entity.GetExtraColumns()
			End Get
			Set(ByVal value As Dictionary(Of String, Object))
				Entity.SetExtraColumns(value)
			End Set
		End Property
		
		<XmlArray("_x_ExtraColumns")> _
		<XmlArrayItem("_x_ExtraColumns", Type := GetType(DictionaryEntry))> _
		Public Property _x_ExtraColumns() As DictionaryEntry()
			Get
				Dim extra As Dictionary(Of String, Object) = Entity.GetExtraColumns()

				' Make an array of DictionaryEntries to return   
				Dim ret As DictionaryEntry() = New DictionaryEntry(extra.Count - 1) {}
				Dim i As Integer = 0
				Dim de As DictionaryEntry

				' Iterate through the extra columns to load items into the array.   
				For Each kv As KeyValuePair(Of String, Object) In extra
					de = New DictionaryEntry()
					de.Key = kv.Key
					de.Value = kv.Value
					ret(i) = de
					i += 1
				Next
				Return ret
			End Get
			Set
				Dim extra As New Dictionary(Of String, Object)()
				For i As Integer = 0 To value.Length - 1
					extra.Add(DirectCast(value(i).Key, String), CInt(value(i).Value))
				Next
				Entity.SetExtraColumns(extra)
			End Set
		End Property
		
        <XmlIgnore> _		
        Public Property Entity As <%=source.Entity%>
        
            Get
                If Me._entity Is Nothing Then
                    Me.entity = New <%=source.Entity%>()
					Me.theEntity = Me._entity					
                End If

                Return _entity
            End Get

            Set
                Me._entity = value
            End Set
        End Property
		
		Protected Property TheRowState() As String
			Get
				Return theEntity.es.RowState.ToString()
			End Get
			
			Set(ByVal value As String)
				Select Case value
					Case "Unchanged"
						theEntity.AcceptChanges()
						Exit Select
					
					Case "Added"
						theEntity.AcceptChanges()
						theEntity.es.RowState = esDataRowState.Added
						Exit Select
					
					Case "Modified"
						theEntity.AcceptChanges()
						theEntity.es.RowState = esDataRowState.Modified
						Exit Select
					
					Case "Deleted"
						theEntity.AcceptChanges()
						theEntity.MarkAsDeleted()
						Exit Select
				End Select
			End Set
		End Property	
		
		Protected Function IncludeColumn(ByVal columnName As String) As Boolean
			Dim include As Boolean = False
			
			If dirtyColumnsOnly Then
				If theEntity.es.ModifiedColumns IsNot Nothing AndAlso theEntity.es.ModifiedColumns.Contains(columnName) Then
					include = True
				End If
			ElseIf Not theEntity.es.IsDeleted Then
				include = True
			End If
			
			Return include
		End Function	

        <NonSerialized(), XmlIgnore(), CLSCompliant(False)> _
        Public _entity As <%=source.Entity%>
		
        <NonSerialized(), XmlIgnore(), CLSCompliant(False)> _
        Protected theEntity As esEntity

        <NonSerialized(), XmlIgnore()> _
        Protected dirtyColumnsOnly As Boolean		

	End Class
	
<%if(!GenerateSingleFile){ %>	
End Namespace<%}%>
<script runat="template">

public string GetFileName()
{
	return esMeta.esPlugIn.ProxyStub((esPluginSource)esMeta.Input["Source"]) + ".vb";
}

public EntitySpaces.MetadataEngine.Root TheMetaData
{
	get { return esMeta;  }
	set { esMeta = value; }	
}

private bool IsConcurrency(IPropertyCollection props, IColumn col)
{
	bool isConcurrency = false;
	
	switch(esMeta.DriverString)
	{
		case "ORACLE":
		
				EntitySpaces.MetadataEngine.IProperty prop = props["CONCURR:" + col.Name];
				if(prop != null)
				{
					isConcurrency = true;
				}
				break;
		
		case "SQL":
		
				if(col.DataTypeName == "timestamp")
				{
					isConcurrency = true;
				}
				break;
				
		case "VISTADB3X":
		
				if(col.DataTypeName == "Timestamp")
				{
					isConcurrency = true;
				}
				break;
			
		default:
			break;
	}		
	
	return isConcurrency;
}

</script>	